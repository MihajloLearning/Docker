networks:    # Crate a network for a group of containers, can isolate containers in different networks.
  app-network:
    driver: bridge

volumes:     # Crates a volume(folder) on the local machine, this folder stays even if containers are shut down
  shared-logs:   # Crated this to store logs from the app there, and the monitoring apps will read from here.
  mongo-data:
  driver: local
  prometheus-data:
  grafana-data:
    driver: local #Presistant volume on local machine
  kibana-data:
    driver: local
  elasticsearch-data:
services:   # Here we define the services(Containers we want to bring up), they can be also pulled automatically from docker hub
  app:
    build: .  # The dot here tells docker that the image to build is located in the current directory, you can define multiple dockerfiles
    container_name: myApp
    ports:
      - "5000:5000"   # Port needs to be exposed to the outside <host>:<container>
    #environment:   # Here we can define environment variables
    depends_on:
      - mongodb    # This container does not start until something is started that it depends on
    volumes:
      - shared-logs:/app/logs  # This is a "named volume" it keeps the data localy but can not be transferred to another machine
    networks:
      - app-network  # We assign the app to the created network
    restart: unless-stopped # We assign a restart policy to the container

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      #- ./nginx-status.conf:/etc/nginx/conf.d/status.conf  # Needed for metrics
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped

  mongodb:
    image: mongo:4.4
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.6
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data 
    ports:
      - "9200:9200"
    networks:
      - app-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.16.6
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - shared-logs:/usr/share/logstash/logs
    depends_on:
      - elasticsearch
    networks:
      - app-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.6
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    volumes:
      - kibana-data:/usr/share/kibana/data
    networks:
      - app-network
    restart: unless-stopped

  kibana-importer:
    image: curlimages/curl:latest
    depends_on:
      - kibana
    volumes:
      - ./kibana-config/export.ndjson:/usr/share/kibana/export.ndjson
    entrypoint: >
      sh -c '
        echo "Waiting for Kibana...";
        until curl -s http://kibana:5601/api/status | grep -q "\"state\":\"green\""; do
          sleep 5;
          echo "Still waiting...";
        done;
        echo "Kibana is ready. Importing dashboards...";
        curl -X POST http://kibana:5601/api/saved_objects/_import \
          -H "kbn-xsrf: true" \
          --form file=@/usr/share/kibana/export.ndjson;
        echo "Import done."      '


  prometheus:
    image: docker.io/prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    volumes:
      - ./Prometheus/prometheus.yml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    privileged: true
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
    # Mount the entire root filesystem as read-only. Allows cAdvisor to access all system-level data.
    - /:/rootfs:ro
    # Provides access to Docker-related sockets and process information.
    - /var/run:/var/run:rw
    # Grants read-only access to kernel and system information (e.g., CPU, memory).
    - /sys:/sys:ro
    # Gives read-only access to Docker container information like logs and metadata.
    - /var/lib/docker/:/var/lib/docker:ro
    # Mount cgroup subsystems to gather container-level resource usage metrics.
    - /cgroup/cpu:/cgroup/cpu
    - /cgroup/cpuacct:/cgroup/cpuacct
    - /cgroup/cpuset:/cgroup/cpuset
    - /cgroup/memory:/cgroup/memory
    - /cgroup/blkio:/cgroup/blkio
    networks:
      - app-network