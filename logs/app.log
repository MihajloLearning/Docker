2025-04-17 11:01:31,399 INFO [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.2.1.227:5000
2025-04-17 11:01:31,400 INFO [33mPress CTRL+C to quit[0m
2025-04-17 11:01:43,582 INFO 127.0.0.1 - - [17/Apr/2025 11:01:43] "GET / HTTP/1.1" 200 -
2025-04-17 11:01:43,648 INFO 127.0.0.1 - - [17/Apr/2025 11:01:43] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2025-04-17 11:01:47,463 INFO Inserting user: 12edsa
2025-04-17 11:01:49,283 INFO Fetching all users
2025-04-17 11:02:17,658 ERROR Exception on /users [POST]
Traceback (most recent call last):
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "D:\DockerProject\DockerMongoDB\app\main.py", line 18, in create_user
    user_id = add_user(name)
  File "D:\DockerProject\DockerMongoDB\app\db.py", line 10, in add_user
    result = users_collection.insert_one({"name": name})
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 891, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 831, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2040, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1926, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 119, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1972, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2709, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2819, in _write
    self._server = self._get_server()
                   ~~~~~~~~~~~~~~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2802, in _get_server
    return self._client._select_server(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._server_selector,
        ^^^^^^^^^^^^^^^^^^^^^^
    ...<4 lines>...
        operation_id=self._operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1791, in _select_server
    server = topology.select_server(
        server_selector,
    ...<2 lines>...
        operation_id=operation_id,
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 409, in select_server
    server = self._select_server(
        selector,
    ...<4 lines>...
        operation_id=operation_id,
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 387, in _select_server
    servers = self.select_servers(
        selector, operation, server_selection_timeout, address, operation_id
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 294, in select_servers
    server_descriptions = self._select_servers_loop(
        selector, server_timeout, operation, operation_id, address
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 344, in _select_servers_loop
    raise ServerSelectionTimeoutError(
        f"{self._error_message(selector)}, Timeout: {timeout}s, Topology Description: {self.description!r}"
    )
pymongo.errors.ServerSelectionTimeoutError: mongo:27017: [Errno 11001] getaddrinfo failed (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 6800c36b34be9ae2d2bf2a2c, topology_type: Unknown, servers: [<ServerDescription ('mongo', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('mongo:27017: [Errno 11001] getaddrinfo failed (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>
2025-04-17 11:02:17,683 INFO 127.0.0.1 - - [17/Apr/2025 11:02:17] "[35m[1mPOST /users HTTP/1.1[0m" 500 -
2025-04-17 11:02:19,404 ERROR Exception on /users [GET]
Traceback (most recent call last):
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "D:\DockerProject\DockerMongoDB\app\main.py", line 24, in fetch_users
    users = get_all_users()
  File "D:\DockerProject\DockerMongoDB\app\db.py", line 16, in get_all_users
    users = list(users_collection.find({}, {"_id": 0}))
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\cursor.py", line 1284, in __next__
    return self.next()
           ~~~~~~~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\cursor.py", line 1260, in next
    if len(self._data) or self._refresh():
                          ~~~~~~~~~~~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\cursor.py", line 1208, in _refresh
    self._send_message(q)
    ~~~~~~~~~~~~~~~~~~^^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\cursor.py", line 1102, in _send_message
    response = client._run_operation(
        operation, self._unpack_response, address=self._address
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 119, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1896, in _run_operation
    return self._retryable_read(
           ~~~~~~~~~~~~~~~~~~~~^
        _cmd,
        ^^^^^
    ...<4 lines>...
        operation=operation.name,
        ^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2005, in _retryable_read
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func,
        ^^^^^
    ...<7 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 119, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1972, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2709, in run
    return self._read() if self._is_read else self._write()
           ~~~~~~~~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2854, in _read
    self._server = self._get_server()
                   ~~~~~~~~~~~~~~~~^^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2802, in _get_server
    return self._client._select_server(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        self._server_selector,
        ^^^^^^^^^^^^^^^^^^^^^^
    ...<4 lines>...
        operation_id=self._operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1791, in _select_server
    server = topology.select_server(
        server_selector,
    ...<2 lines>...
        operation_id=operation_id,
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 409, in select_server
    server = self._select_server(
        selector,
    ...<4 lines>...
        operation_id=operation_id,
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 387, in _select_server
    servers = self.select_servers(
        selector, operation, server_selection_timeout, address, operation_id
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 294, in select_servers
    server_descriptions = self._select_servers_loop(
        selector, server_timeout, operation, operation_id, address
    )
  File "C:\Users\mihajlo.dimeski\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\topology.py", line 344, in _select_servers_loop
    raise ServerSelectionTimeoutError(
        f"{self._error_message(selector)}, Timeout: {timeout}s, Topology Description: {self.description!r}"
    )
pymongo.errors.ServerSelectionTimeoutError: mongo:27017: [Errno 11001] getaddrinfo failed (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 6800c36b34be9ae2d2bf2a2c, topology_type: Unknown, servers: [<ServerDescription ('mongo', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('mongo:27017: [Errno 11001] getaddrinfo failed (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>
2025-04-17 11:02:19,421 INFO 127.0.0.1 - - [17/Apr/2025 11:02:19] "[35m[1mGET /users HTTP/1.1[0m" 500 -
